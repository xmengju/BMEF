Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2,  Sigma2_omega = rep(0.4^2, n))
Delta <- array(runif(J*R*p, 2, 4), dim = c(J, R, p))/4
entries_idx <- rbinom(J* R*p, 1,0.5)
Delta[entries_idx ] <- -Delta[entries_idx] # introduce some negative values
dat <- dat.gen(seed = 1, n, J, TT, FF,  K_T, K_F, U, V, Delta, X, Sigma2s)
params <- list(Sigma2_delta = rep(5, p), a_gamma = 3, b_gamma = 0.5, a_omega = 3, b_omega = 0.5,
a_delta = 1, b_delta = 1)
n_burn <- 300
n_sample <- 200
tt <- dat$tt
ff <- dat$ff
Y <- dat$Y
JJ <- matrix(1, n, J)
R_max <- 4 # maximum rank for rank selection
bmef_1 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-1", threshold = 0.01, save_all = FALSE)
bmef_2 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-2", threshold = 0.01, save_all = FALSE)
bmef_obj <- bmef_1;
cred_level <- 0.95
res_infer_decompose <- inference.decompose.bmef(bmef_obj, cred_level)
res_infer_mixed <- inference.mixed.bmef(bmef_obj)
# use the same color scheme, ggplot
for(r in 1:R){
grid <- expand.grid(tt = tt, ff = ff)
grid$A_est <-kronecker(val_ff_est, val_tt_est)
grid$rank <- rep(paste("Rank ", r, sep = ""), TT*FF)
df_long <- pivot_longer(grid,
cols = c("CP_est"),  # Columns to gather
names_to = "z")
dat2plot  <- rbind(dat2plot,  df_long)
}
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
bmef_2 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-2", threshold = 0.01, save_all = FALSE)
bmef_obj <- bmef_1;
cred_level <- 0.95
res_infer_decompose <- inference.decompose.bmef(bmef_obj, cred_level)
res_infer_mixed <- inference.mixed.bmef(bmef_obj)
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
n <- 20 # number of subjects
J <- 3 # number of conditions
TT <- 50 # time points
FF <- 50 # frequency points
K_T <- 6 # number of marginal functions for time dimension
K_F <- 6 # number of marginal functions for frequency dimension
R <- 2 # true rank
p <- 2 # number of covariates
set.seed(123)
U <- randortho(K_T)[,1:R]
V <- randortho(K_F)[,1:R]
X <- cbind(rep(1,n), runif(n, -3, 3))
Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2,  Sigma2_omega = rep(0.4^2, n))
Delta <- array(runif(J*R*p, 2, 4), dim = c(J, R, p))/4
entries_idx <- rbinom(J* R*p, 1,0.5)
Delta[entries_idx ] <- -Delta[entries_idx] # introduce some negative values
dat <- dat.gen(seed = 1, n, J, TT, FF,  K_T, K_F, U, V, Delta, X, Sigma2s)
params <- list(Sigma2_delta = rep(5, p), a_gamma = 3, b_gamma = 0.5, a_omega = 3, b_omega = 0.5,
a_delta = 1, b_delta = 1)
n_burn <- 300
n_sample <- 200
tt <- dat$tt
ff <- dat$ff
Y <- dat$Y
JJ <- matrix(1, n, J)
R_max <- 4 # maximum rank for rank selection
bmef_1 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-1", threshold = 0.01, save_all = FALSE)
bmef_2 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-2", threshold = 0.01, save_all = FALSE)
bmef_obj <- bmef_1;
cred_level <- 0.95
res_infer_decompose <- inference.decompose.bmef(bmef_obj, cred_level)
res_infer_mixed <- inference.mixed.bmef(bmef_obj)
# use the same color scheme, ggplot
for(r in 1:R){
grid <- expand.grid(tt = tt, ff = ff)
grid$A_est <-kronecker(val_ff_est, val_tt_est)
grid$rank <- rep(paste("Rank ", r, sep = ""), TT*FF)
df_long <- pivot_longer(grid,
cols = c("CP_est"),  # Columns to gather
names_to = "z")
dat2plot  <- rbind(dat2plot,  df_long)
}
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect
n_burn <- 500
n_sample <- 200
tt <- dat$tt
ff <- dat$ff
Y <- dat$Y
JJ <- matrix(1, n, J)
R_max <- 4 # maximum rank for rank selection
bmef_1 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-1", threshold = 0.01, save_all = FALSE)
n <- 20 # number of subjects
J <- 3 # number of conditions
TT <- 50 # time points
FF <- 50 # frequency points
K_T <- 6 # number of marginal functions for time dimension
K_F <- 6 # number of marginal functions for frequency dimension
R <- 2 # true rank
p <- 2 # number of covariates
set.seed(123)
U <- randortho(K_T)[,1:R]
V <- randortho(K_F)[,1:R]
X <- cbind(rep(1,n), runif(n, -3, 3))
Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2,  Sigma2_omega = rep(0.4^2, n))
Delta <- array(runif(J*R*p, 2, 4), dim = c(J, R, p))/4
entries_idx <- rbinom(J* R*p, 1,0.5)
Delta[entries_idx ] <- -Delta[entries_idx] # introduce some negative values
dat <- dat.gen(seed = 1, n, J, TT, FF,  K_T, K_F, U, V, Delta, X, Sigma2s)
params <- list(Sigma2_delta = rep(5, p), a_gamma = 3, b_gamma = 0.5, a_omega = 3, b_omega = 0.5,
a_delta = 1, b_delta = 1)
n_burn <- 500
n_sample <- 200
tt <- dat$tt
ff <- dat$ff
Y <- dat$Y
JJ <- matrix(1, n, J)
R_max <- 4 # maximum rank for rank selection
bmef_1 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-1", threshold = 0.01, save_all = FALSE)
bmef_2 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-2", threshold = 0.01, save_all = FALSE)
plot(res_infer_mixed$B_s[ii, ,],matrix(dat$O_tilde%*%c(dat$B[ii,,]), TT, FF) )
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5)
# visualize the fixed effect
grid <- expand.grid(tt = tt, ff = ff)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5)
grid$A_est <-res_infer_mixed$A_s[subject_idx, condition_idx]
subject_idx <- 1  # subject index
condition_idx <- 1  # condition index
# visualize the fixed effect
grid <- expand.grid(tt = tt, ff = ff)
grid$A_est <-res_infer_mixed$A_s[subject_idx, condition_idx]
grid$A_est <-res_infer_mixed$A_s[subject_idx, condition_idx,,]
dim(res_infer_mixed$A_s)
grid$A_est <-res_infer_mixed$A_s[subject_idx, condition_idx,,]
grid$A_est <- c(res_infer_mixed$A_s[subject_idx, condition_idx,,])
grid$A_true <dat$O_tilde%*%c(dat$A[subject_idx, condition_idx,,])
df_long <- pivot_longer(grid,
cols = c("CP_est"),  # Columns to gather
names_to = "z")
library(tidyr)
df_long <- pivot_longer(grid,
cols = c("CP_est"),  # Columns to gather
names_to = "z")
df_long <- pivot_longer(grid,   names_to = "z")
df_long <- pivot_longer(grid,
cols = c("A_est", "A_true"),  # Columns to gather
names_to = "type")
grid$A_est <- c(res_infer_mixed$A_s[subject_idx, condition_idx,,])
grid$A_true <dat$O_tilde%*%c(dat$A[subject_idx, condition_idx,,])
df_long <- pivot_longer(grid,
cols = c("A_est", "A_true"),  # Columns to gather
names_to = "type")
head(grid)
grid$A_est <- c(res_infer_mixed$A_s[subject_idx, condition_idx,,])
grid$A_est
grid$A_true <dat$O_tilde%*%c(dat$A[subject_idx, condition_idx,,])
head(grid)
grid$A_est <- c(res_infer_mixed$A_s[subject_idx, condition_idx,,])
grid$A_est
grid$A_true <-dat$O_tilde%*%c(dat$A[subject_idx, condition_idx,,])
df_long <- pivot_longer(grid,
cols = c("A_est", "A_true"),  # Columns to gather
names_to = "type")
head(df_long)
colnames(df_long)[4] <- "value"
pp <- ggplot(df_long, aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
library(ggplot2)
pp <- ggplot(df_long, aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
pp
grid <- expand.grid(tt = tt, ff = ff)
grid$A_est <- c(res_infer_mixed$A_s[subject_idx, condition_idx,,])
grid$A_true<-dat$O_tilde%*%c(dat$A[subject_idx, condition_idx,,])
grid$B_est <- c(res_infer_mixed$B_s[subject_idx, ,])
grid$B_true<-dat$O_tilde%*%c(dat$B[subject_idx, ,])
grid$C_est <- c(res_infer_mixed$C_s[subject_idx, condition_idx,,])
grid$C_true<-dat$O_tilde%*%c(dat$C[subject_idx, condition_idx,,])
df_long <- pivot_longer(grid,
cols = c("A_est", "A_true",
"B_est", "B_true",
"C_est", "C_true"),
names_to = "type")
colnames(df_long)[4] <- "value"
# compare estimated A with true A
p_A <- ggplot(df_long%*%filter(type %in% c("A_est", "A_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
names(df_long)
df_long%*%filter(type %in% c("A_est", "A_true"))
# compare estimated A with true A
p_A <- ggplot(df_long%*%filter("type" %in% c("A_est", "A_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
class(df_long)
names(df_long)
df_long%*%filter(type %in% c("A_est", "A_true"))
# compare estimated A with true A
p_A <- ggplot(df_long %>%filter(type %in% c("A_est", "A_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
df_long%*%filter(type  %>% c("A_est", "A_true"))
df_long%*%filter(type  %>% c("A_est", "A_true"))
df_long%*%filter(type  %>% c("A_est", "A_true"))
names(df_long)
df_long %>% filter(type  %in% c("A_est", "A_true"))
names(df_long)
df_long %>% dplyr::filter(type  %in% c("A_est", "A_true"))
# compare estimated A with true A
p_A <- ggplot(df_long %>%dplyr::filter(type %in% c("A_est", "A_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
p_A
# compare estimated B with true B
p_B <- ggplot(df_long %>%dplyr::filter(type %in% c("B_est", "B_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
p_B
# compare estimated C with true C
p_C <- ggplot(df_long %>%dplyr::filter(type %in% c("C_est", "C_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
p_C
# Posterior inference on fixed and random effects
bmef_obj <- bmef_1
cred_level <- 0.95
res_infer_decompose <- inference.decompose.bmef(bmef_obj, cred_level)
res_infer_decompose <- inference.decompose.bmef(bmef_obj, cred_level)
res_infer_mixed <- inference.mixed.bmef(bmef_obj)
library(tidyr)
library(ggplot2)
subject_idx <- 1  # subject index to make inference of
condition_idx <- 1  # condition index to make inference of
grid <- expand.grid(tt = tt, ff = ff)
grid$A_est <- c(res_infer_mixed$A_s[subject_idx, condition_idx,,])
grid$A_true<-dat$O_tilde%*%c(dat$A[subject_idx, condition_idx,,])
grid$B_est <- c(res_infer_mixed$B_s[subject_idx, ,])
grid$B_true<-dat$O_tilde%*%c(dat$B[subject_idx, ,])
grid$C_est <- c(res_infer_mixed$C_s[subject_idx, condition_idx,,])
grid$C_true<-dat$O_tilde%*%c(dat$C[subject_idx, condition_idx,,])
df_long <- pivot_longer(grid,
cols = c("A_est", "A_true",
"B_est", "B_true",
"C_est", "C_true"),
names_to = "type")
colnames(df_long)[4] <- "value"
# compare estimated A with true A
p_A <- ggplot(df_long %>%dplyr::filter(type %in% c("A_est", "A_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
# compare estimated B with true B
p_B <- ggplot(df_long %>%dplyr::filter(type %in% c("B_est", "B_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
# compare estimated C with true C
p_C <- ggplot(df_long %>%dplyr::filter(type %in% c("C_est", "C_true")), aes(x = tt, y = ff, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +  # Heatmap color scale
facet_wrap(~type,nrow = 1) +
labs(x = "Time",
y = "Frequency",
fill = "Value") +    theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)  +  theme(strip.text = element_text(size = 12, face = "bold"))
p_C
p_B
p_A
n
dim(bmef_obj$v_s)
Rs <- dim(bmef_obj$v_s)[2]
dim(res_infer_decompose$base_patterns)
dim(res_infer_decompose$base_patterns$m)
df_long <- pivot_longer(grid)
head(  grid)
grid <- expand.grid(tt = tt, ff = ff)
grid$base <- res_infer_decompose$base_patterns$m[rr,,] # posterior median
grid <- expand.grid(tt = tt, ff = ff)
grid$base <- c(res_infer_decompose$base_patterns$m[rr,,]) # posterior median
head(grid)
patch_list[[r]] <-  ggplot(grid, aes(x = tt, y = ff, fill = base)) +
geom_tile() +  scale_fill_viridis_c() +  labs(x = "t (Sec)",
y = "f (Hz)",  fill = " ") +  theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +theme(legend.position  = "left")
patch_list <- list()
patch_list[[r]] <-  ggplot(grid, aes(x = tt, y = ff, fill = base)) +
geom_tile() +  scale_fill_viridis_c() +  labs(x = "t (Sec)",
y = "f (Hz)",  fill = " ") +  theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +theme(legend.position  = "left")
patch_list[[r]]
patch_list <- list() # store plots for the two-way base patterns
pt_list <- list() # store plots for the marginal function for t
pf_list <- list()  # store plots for the marginal function for f
for(r in 1:Rs){
grid <- expand.grid(tt = tt, ff = ff)
grid$base <- c(res_infer_decompose$base_patterns$m[rr,,]) # posterior median
df_long <- pivot_longer(grid)
patch_list[[r]] <-  ggplot(grid, aes(x = tt, y = ff, fill = base)) +
geom_tile() +  scale_fill_viridis_c() +  labs(x = "t (Sec)",
y = "f (Hz)",  fill = " ") +  theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +theme(legend.position  = "left")
data_t <- data.frame(x = tt,  mean = res_infer_decompose$marginal_t$m,
lower_95 = res_infer_decompose$marginal_t$l, upper_95 =res_infer_decompose$marginal_t$u)
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m,
lower_95 = res_infer_decompose$marginal_f$l, upper_95 =res_infer_decompose$marginal_f$u)
pt_list[[r]] = ggplot(data_t, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax =  upper_95), fill = "gray60", alpha = 0.5) +     geom_line(aes(y = mean), color = "black", size = 0.6) +  labs(y = expression(phi[1]^"*"~"(t)"),
x = "t (Sec)")
pf_list[[r]] = ggplot(data_f, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +   geom_line(aes(y = mean), color = "black", size = 0.6) +   labs(y = expression(psi[1]^"*"~"(f)"),
x = "f (Hz)")
}
patch_list <- list() # store plots for the two-way base patterns
pt_list <- list() # store plots for the marginal function for t
pf_list <- list()  # store plots for the marginal function for f
for(r in 1:Rs){
grid <- expand.grid(tt = tt, ff = ff)
grid$base <- c(res_infer_decompose$base_patterns$m[rr,,]) # posterior median
patch_list[[r]] <-  ggplot(grid, aes(x = tt, y = ff, fill = base)) +
geom_tile() +  scale_fill_viridis_c() +  labs(x = "t (Sec)",
y = "f (Hz)",  fill = " ") +  theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +theme(legend.position  = "left")
data_t <- data.frame(x = tt,  mean = res_infer_decompose$marginal_t$m,
lower_95 = res_infer_decompose$marginal_t$l, upper_95 =res_infer_decompose$marginal_t$u)
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m,
lower_95 = res_infer_decompose$marginal_f$l, upper_95 =res_infer_decompose$marginal_f$u)
pt_list[[r]] = ggplot(data_t, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax =  upper_95), fill = "gray60", alpha = 0.5) +     geom_line(aes(y = mean), color = "black", size = 0.6) +  labs(y = expression(phi[1]^"*"~"(t)"),
x = "t (Sec)")
pf_list[[r]] = ggplot(data_f, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +   geom_line(aes(y = mean), color = "black", size = 0.6) +   labs(y = expression(psi[1]^"*"~"(f)"),
x = "f (Hz)")
}
patch_list <- list() # store plots for the two-way base patterns
pt_list <- list() # store plots for the marginal function for t
pf_list <- list()  # store plots for the marginal function for f
for(r in 1:Rs){
grid <- expand.grid(tt = tt, ff = ff)
grid$base <- c(res_infer_decompose$base_patterns$m[rr,,]) # posterior median
patch_list[[r]] <-  ggplot(grid, aes(x = tt, y = ff, fill = base)) +
geom_tile() +  scale_fill_viridis_c() +  labs(x = "t (Sec)",
y = "f (Hz)",  fill = " ") +  theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +theme(legend.position  = "left")
data_t <- data.frame(x = tt,  mean = res_infer_decompose$marginal_t$m,
lower_95 = res_infer_decompose$marginal_t$l, upper_95 =res_infer_decompose$marginal_t$u)
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m,
lower_95 = res_infer_decompose$marginal_f$l, upper_95 =res_infer_decompose$marginal_f$u)
pt_list[[r]] = ggplot(data_t, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax =  upper_95), fill = "gray60", alpha = 0.5) +     geom_line(aes(y = mean), color = "black", linewidth = 0.6) +  labs(y = expression(phi[1]^"*"~"(t)"),
x = "t (Sec)")
pf_list[[r]] = ggplot(data_f, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +   geom_line(aes(y = mean), color = "black", linewidth = 0.6) +   labs(y = expression(psi[1]^"*"~"(f)"),
x = "f (Hz)")
}
pf_list[[r]]
data_f
data_f$lower_95.1
data_t <- data.frame(x = tt,  mean = res_infer_decompose$marginal_t$m,
lower_95 = res_infer_decompose$marginal_t$l, upper_95 =res_infer_decompose$marginal_t$u)
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m,
lower_95 = res_infer_decompose$marginal_f$l, upper_95 =res_infer_decompose$marginal_f$u)
res_infer_decompose$marginal_t$l
data_t <- data.frame(x = tt,  mean = res_infer_decompose$marginal_t$m[r,],
lower_95 = res_infer_decompose$marginal_t$l[r,], upper_95 =res_infer_decompose$marginal_t$u[r,])
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m[r,],
lower_95 = res_infer_decompose$marginal_f$l[r,], upper_95 =res_infer_decompose$marginal_f$u[r,])
pt_list[[r]] = ggplot(data_t, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax =  upper_95), fill = "gray60", alpha = 0.5) +     geom_line(aes(y = mean), color = "black", linewidth = 0.6) +  labs(y = expression(phi[1]^"*"~"(t)"),
x = "t (Sec)")
pt_list[[r]]
pt_list[[r]] + theme_minimal()
library(gridExtra)
grid.arrange( patch_list[[1]], pt_list[[1]], pf_list[[1]],
patch_list[[2]],  pt_list[[2]], pf_list[[2]],
nrow = 2, ncol= 3, heights = c(1,1), widths = c(1.3,1,1))
pf_list[[r]]
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m[r,],
lower_95 = res_infer_decompose$marginal_f$l[r,], upper_95 =res_infer_decompose$marginal_f$u[r,])
pf_list[[r]] = ggplot(data_f, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +   geom_line(aes(y = mean), color = "black", linewidth = 0.6) +   labs(y = expression(psi[1]^"*"~"(f)"),
x = "f (Hz)")
pf_list[[r]]
patch_list <- list() # store plots for the two-way base patterns
pt_list <- list() # store plots for the marginal function for t
pf_list <- list()  # store plots for the marginal function for f
for(r in 1:Rs){
grid <- expand.grid(tt = tt, ff = ff)
grid$base <- c(res_infer_decompose$base_patterns$m[rr,,]) # posterior median
patch_list[[r]] <-  ggplot(grid, aes(x = tt, y = ff, fill = base)) +
geom_tile() +  scale_fill_viridis_c() +  labs(x = "t (Sec)",
y = "f (Hz)",  fill = " ") +  theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +theme(legend.position  = "left")
data_t <- data.frame(x = tt,  mean = res_infer_decompose$marginal_t$m[r,],
lower_95 = res_infer_decompose$marginal_t$l[r,], upper_95 =res_infer_decompose$marginal_t$u[r,])
data_f <- data.frame(x = ff,  mean = res_infer_decompose$marginal_f$m[r,],
lower_95 = res_infer_decompose$marginal_f$l[r,], upper_95 =res_infer_decompose$marginal_f$u[r,])
pt_list[[r]] = ggplot(data_t, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax =  upper_95), fill = "gray60", alpha = 0.5) +     geom_line(aes(y = mean), color = "black", linewidth = 0.6) +  labs(y = expression(phi[1]^"*"~"(t)"),
x = "t (Sec)")
pf_list[[r]] = ggplot(data_f, aes(x = x)) +  geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +   geom_line(aes(y = mean), color = "black", linewidth = 0.6) +   labs(y = expression(psi[1]^"*"~"(f)"),
x = "f (Hz)")
}
grid.arrange( patch_list[[1]], pt_list[[1]], pf_list[[1]],
patch_list[[2]],  pt_list[[2]], pf_list[[2]],
nrow = 2, ncol= 3, heights = c(1,1), widths = c(1.3,1,1))
library(BMEF)
library(BMEF)
usethis::use_github()
rlang::last_trace()
devtools:documentation()
devtools:documentat()
devtools:document()
devtools::document()
