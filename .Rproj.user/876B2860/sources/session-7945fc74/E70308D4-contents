### parallel code to test methods 
### test the simulation settings in parallel
rm(list = ls())

do.exp.parallel <- function(seed, n = 100, R = 4, p = 2, J = 3, H = "H1", n_sample = 200, n_burn = 500){
  

  library(splines); library(pracma); library(lattice); library(gridExtra); library(mcompanion)
  library(MASS); library(mvtnorm);  library(tidyr);  library(ggplot2);  library(gtools) 
  library(simdd);  library(VGAM);  library(dplyr);  library(tidyverse);  library(ggh4x)
  library(posterior);  library(refund);  library(face);  library(Rcpp);  
  library(plotly);  library(fastDummies);  library(tictoc);  library(fANCOVA)
  
  setwd("/Users/xmengju/Tensor_EEG/Code/0429")
  source("summary_individual_method.R")
  source("fun_gen.R")
  source("fun_exp_simple.R")
  source("helper.R")
  source("tensor_ssl.R")

  dat2return <- list()
  
  
  TT <- 50
  FF <- 50
  K_T <- K_F <- 6
  JJ <- matrix(1, n, J)
  
  
  set.seed(seed)
  X <- x.gen(seed, n, p); X[,1] <- 1
  if(p == 3){
    X[, 3] <- rbinom(n, 1, 0.5)
  }
  UV <- u.v.gen(seed, K_T, K_F, R)
  U <-  UV$U; V <- UV$V
  Delta <- delta.gen(seed, J, R, p)
  Delta <-  Delta/4
  if(H == "H1"){
    Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2, Sigma2_omega = rep(0.4^2,n))
  }else{
    Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2,  Sigma2_omega = runif(n,0.2^2,1^2))
  }
  
  dat <- dat.gen(seed, n, J, TT, FF, K_T, K_F, U, V, Delta, X, Sigma2s)
  Y <- dat$Y
  

  R_max <- 5; inits <- NULL; threshold <- 0.001
  
  params <- list(Sigma2_theta = 1, Sigma2_eta = 1, Sigma2_delta = rep(5, p), 
                 aa_gamma = 3, bb_gamma = 0.5, aa_omega = 3, bb_omega = 0.5)
  
  control.simple <- list(K_T = K_T, K_F = K_F, R_max = R_max, n_sample = n_sample, n_burn = n_burn, params = params, inits = inits, threshold  = threshold)
  control.regular <- list(K_T = K_T, K_F = K_F, R_max = R_max, n_sample = n_sample, n_burn = n_burn, params = params, inits = inits, threshold  = threshold)

  control.list <- list(control.simple = control.simple, control.regular = control.regular)
  
  methods <- c("simple", "regular", "flfosr", "bayes", "mhpca")
  
  
  
  control.simple <- control.list$control.simple
  K_T <- control.simple$K_T; K_F <- control.simple$K_F
  K <- K_T*K_F
  R_max <- control.simple$R_max; n_sample <- control.simple$n_sample
  n_burn <-  control.simple$n_burn;  params <- control.simple$params  
  inits <- control.simple$inits;  threshold <- control.simple$threshold
  
  
  tmp_prep <- prepocess(TT, FF, K_T, K_F)
  O <- tmp_prep$O
  O_tilde <- tmp_prep$O_tilde
  
  
  tt_simple <-  system.time(simple_model <- tensor.decomp.ssl(seed, Y, X, JJ, TT, FF, R = R_max, K_T, K_F, n_sample, n_burn, params = params, inits  = inits, save_all = FALSE, type_simple = TRUE, threshold = threshold))
  
  
  print("Done!")
  
  K <- K_T*K_F
  pred_fix_simple_0 <- array(0, dim = c(J, TT, FF))
  pred_fix_simple_1 <- array(0, dim = c(J, TT, FF))
  pred_fix_simple_2 <- array(0, dim = c(J, TT, FF))
  pred_fix_simple_all <- pred_fix_simple_all_u <- pred_fix_simple_all_l <- array(NA, dim = c(n, J, TT, FF))
  pred_ran_b_simple <- array(NA,dim = c(n, TT, FF))
  pred_ran_c_simple <- array(NA,dim = c(n,J, TT, FF))
  
  
  sample_idx <- 1:n_sample
  
  UV_patch_vec_s <- array(NA, dim = c(length(sample_idx), length(simple_model$R_indices), dim(simple_model$v_s)[3]* dim(simple_model$u_s)[3]))
  for(ss in 1:length(sample_idx)){
    for(rr in  1:length(simple_model$R_indices)){
      UV_patch_vec_s[ss ,rr,] <- kronecker(simple_model$v_s[ss , simple_model$R_indices[rr],],simple_model$u_s[ss, simple_model$R_indices[rr],])   
    }
  }
  

  
  for(jj in 1:J){
    
    tmp_0 <-  tmp_1 <-  tmp_2 <- matrix(0, length(sample_idx), K)
    
    for(rr_idx in   1:length(simple_model$R_indices)){
      
      for(ss in 1:length(sample_idx)){
        
        if(p == 3){
          tmp_0[ss,]  <- tmp_0[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
          tmp_1[ss,]  <- tmp_1[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
          tmp_2[ss,]  <- tmp_2[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 3] * UV_patch_vec_s[ss,rr_idx, ]
        }
        
        if(p == 2){
          tmp_0[ss,]  <- tmp_0[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
          tmp_1[ss,]  <- tmp_1[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
        }
        if(p == 1){
          tmp_0[ss,]  <- tmp_0[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx],] * UV_patch_vec_s[ss,rr_idx, ]
        }
      }
    }
    
    pred_fix_simple_0[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_0), 1, mean), TT, FF)
    
    if(p == 2){
      pred_fix_simple_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
      pred_fix_simple_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
    }
    if(p == 3){
      pred_fix_simple_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
      pred_fix_simple_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
    }
  }
  

  for(ii in 1:dim(Y)[1]){
    pred_ran_b_simple[ii,,] <- matrix(O_tilde%*%  apply(simple_model$gamma_s[sample_idx, , ii],2, mean), TT, FF)
  }
  

  for(ii in 1:dim(Y)[1]){
    
    for(jj in 1:J){
      pred_fix_simple_all[ii,jj,, ] <-  matrix( apply( O_tilde%*%  t(simple_model$alpha_s[sample_idx, ,jj, ii]),1, mean), TT, FF)
      pred_fix_simple_all_u[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(simple_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.95)}), TT, FF)
      pred_fix_simple_all_l[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(simple_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.05)}), TT, FF)
      pred_ran_c_simple[ii,jj,, ] <- matrix(O_tilde%*%apply(simple_model$omega_s[sample_idx, ,jj, ii],2, mean), TT, FF)
    }
  }
  

  dat2summary <-  list(dat = dat, R_indices_simple = simple_model$R_indices, tt_simple = tt_simple, 
                       Sigma2_s_simple = simple_model$Sigma2_s,  
                       v_s_simple = simple_model$v_s, 
                       u_s_simple = simple_model$u_s, 
                       delta_s_simple = simple_model$delta_s, 
                       pred_fix_simple_all = pred_fix_simple_all, 
                       pred_fix_simple_all_u = pred_fix_simple_all_u, 
                       pred_fix_simple_all_l = pred_fix_simple_all_l,
                       pred_fix_simple_0 = pred_fix_simple_0, 
                       pred_fix_simple_1 = pred_fix_simple_1, 
                       pred_fix_simple_2 = pred_fix_simple_2,
                       pred_ran_b_simple = pred_ran_b_simple, 
                       pred_ran_c_simple = pred_ran_c_simple)
  
  dat2return  <- c(dat2return,  list(tt_simple = tt_simple,  R_indices_simple = simple_model$R_indices, BMEF_simple_summary =  summary_BMEF_simple(dat2summary)
                                     ))
  

  control.regular <- control.list$control.regular
  K_T <- control.regular$K_T; K_F <- control.regular$K_F
  R_max <- control.regular$R_max; n_sample <- control.regular$n_sample
  n_burn <-  control.regular$n_burn;  params <- control.regular$params  
  inits <- control.regular$inits;  threshold <- control.regular$threshold
  tmp_prep <- prepocess(TT, FF, K_T, K_F)
  O <- tmp_prep$O
  O_tilde <- tmp_prep$O_tilde
  

  tt_regular <-  system.time(regular_model <- tensor.decomp.ssl(seed, Y, X, JJ, TT, FF, R = R_max, K_T, K_F, n_sample, n_burn, params = params, inits  = inits, save_all = FALSE, type_simple = FALSE, threshold = threshold))
  
  
  K <- K_T*K_F
  pred_fix_regular_0 <- array(0, dim = c(J, TT, FF))
  pred_fix_regular_1 <- array(0, dim = c(J, TT, FF))
  pred_fix_regular_2 <- array(0, dim = c(J, TT, FF))
  pred_fix_regular_all <- pred_fix_regular_all_u <- pred_fix_regular_all_l <- array(NA, dim = c(n, J, TT, FF))
  pred_ran_b_regular <- array(NA,dim = c(n, TT, FF))
  pred_ran_c_regular <- array(NA,dim = c(n,J, TT, FF))
  
  
  sample_idx <- 1:n_sample
  
  UV_patch_vec_s <- array(NA, dim = c(length(sample_idx), length(regular_model$R_indices), dim(regular_model$v_s)[3]* dim(regular_model$u_s)[3]))
  for(ss in 1:length(sample_idx)){
    for(rr in  1:length(regular_model$R_indices)){
      UV_patch_vec_s[ss ,rr,] <- kronecker(regular_model$v_s[ss , regular_model$R_indices[rr],],regular_model$u_s[ss, regular_model$R_indices[rr],])   
    }
  }
  
  for(jj in 1:J){
    
    tmp_0 <-  tmp_1 <-  tmp_2 <- matrix(0, length(sample_idx), K)
    
    for(rr_idx in   1:length(regular_model$R_indices)){
      
      for(ss in 1:length(sample_idx)){
        
        if(p == 3){
          tmp_0[ss,]  <- tmp_0[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
          tmp_1[ss,]  <- tmp_1[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
          tmp_2[ss,]  <- tmp_2[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 3] * UV_patch_vec_s[ss,rr_idx, ]
        }
        
        if(p == 2){
          tmp_0[ss,]  <- tmp_0[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
          tmp_1[ss,]  <- tmp_1[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
        }
        if(p == 1){
          tmp_0[ss,]  <- tmp_0[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx],] * UV_patch_vec_s[ss,rr_idx, ]
        }
      }
    }
    
    pred_fix_regular_0[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_0), 1, mean), TT, FF)
    
    if(p == 2){
      pred_fix_regular_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
      pred_fix_regular_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
    }
    if(p == 3){
      pred_fix_regular_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
      pred_fix_regular_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
    }
  }
  
  for(ii in 1:dim(Y)[1]){
    pred_ran_b_regular[ii,,] <- matrix(O_tilde%*%  apply(regular_model$gamma_s[sample_idx, , ii],2, mean), TT, FF)
  }
  
  for(ii in 1:dim(Y)[1]){
    for(jj in 1:J){
      pred_fix_regular_all[ii,jj,, ] <-  matrix( apply( O_tilde%*%  t(regular_model$alpha_s[sample_idx, ,jj, ii]),1, mean), TT, FF)
      pred_fix_regular_all_u[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(regular_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.975)}), TT, FF)
      pred_fix_regular_all_l[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(regular_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.025)}), TT, FF)
      pred_ran_c_regular[ii,jj,, ] <- matrix(O_tilde%*%apply(regular_model$omega_s[sample_idx, ,jj, ii],2, mean), TT, FF)
    }
  }
  
  dat2summary <-  list(dat = dat, R_indices_regular = regular_model$R_indices, tt_regular = tt_regular, 
                       Sigma2_s_regular = regular_model$Sigma2_s,  
                       v_s_regular = regular_model$v_s, 
                       u_s_regular = regular_model$u_s, 
                       delta_s_regular = regular_model$delta_s, 
                       pred_fix_regular_all = pred_fix_regular_all, 
                       pred_fix_regular_all_u = pred_fix_regular_all_u, 
                       pred_fix_regular_all_l = pred_fix_regular_all_l,
                       pred_fix_regular_0 = pred_fix_regular_0, 
                       pred_fix_regular_1 = pred_fix_regular_1, 
                       pred_fix_regular_2 = pred_fix_regular_2,
                       pred_ran_b_regular = pred_ran_b_regular, 
                       pred_ran_c_regular = pred_ran_c_regular)
  
  dat2return  <- c(dat2return,  list(tt_regular = tt_regular,  R_indices_regular = regular_model$R_indices, BMEF_regular_summary =  summary_BMEF_regular(dat2summary)))
  
  saveRDS(file = paste(seed,".RData"), dat2return)
  return(dat2return)
}


do.exp.parallel(seed = 1, n = 50, R = 4, p = 3, J = 3, H = "H2", n_sample = 100, n_burn = 800)


library(doParallel)
library(foreach)
n_cores <- 5  # or however many you want to use
cl <- makeCluster(n_cores)
registerDoParallel(cl)
res2 <- foreach(seed = 1:5) %dopar% {
  do.exp.parallel(seed = seed, n = 80, R = 4, p = 3, J = 3, H = "H2", n_sample = 100, n_burn = 800)
}
stopCluster(cl)





res3 <- NULL
for(i in 1:5){
  res3 <- rbind(res3, c(mean(res2[[i]]$BMEF_simple_summary$mse_A_BMEF_simple), mean(res2[[i]]$BMEF_regular_summary$mse_A_BMEF_regular)))
}

boxplot(res3)

res2[[5]]


i = 5

res3
boxplot(res3)

res2



ress <- NULL
for(i in 1:5){
  ress <- rbind(ress, c(mean(res2[[i]]$BMEF_simple_summary$mse_A_BMEF_simple), mean(res2[[i]]$BMEF_regular_summary$mse_A_BMEF_regular)))
}




ress <- NULL
for(i in 1:5){
  ress <- rbind(ress, c(mean(res2[[i]]$BMEF_simple_summary$mse_C_BMEF_simple), mean(res2[[i]]$BMEF_regular_summary$mse_C_BMEF_regular)))
}

boxplot(ress)



(ress[,2] - ress[,1])*TT*FF
boxplot(ress)



mean(res[[2]]$BMEF_regular_summary$mse_A_BMEF_regular)
mean(res[[2]]$BMEF_simple_summary$mse_A_BMEF_simple)


mean(res[[5]]$BMEF_regular_summary$mse_A_BMEF_regular)
mean(res[[5]]$BMEF_simple_summary$mse_A_BMEF_simple)



cl<-makeCluster(5) #register cores
registerDoParallel(cl, cores = 6)
out_parallel <-   parallel::mclapply(1:10, mc.cores = 3, FUN = function(seed) {
  out <-do.exp.parallel(seed = seed, n = 20, p = 5, d = 2, type = "I1", task = 'R', tau = 0.1, SNR = 5, r = NULL)
})
out_parallel

for(i in 1:10){
  do.exp.parallel(seed = i, n = 20, p = 5, d = 2, type = "I1", task = 'R', tau = 0.1, SNR = 5, r = NULL)
}


wrapper <- function(seed) {
  do.exp.parallel(seed = seed, n = 100, R = 4, p = 2, J = 3, H = "H1", n_sample = 10, n_burn = 10)
}

clusterExport(cl, c("do.exp.parallel", "wrapper"))
res <- parLapply(cl, 1:5, wrapper)


library(foreach)


cores = detectCores() #32
cl<-makeCluster(2) #register cores
registerDoParallel(cl, cores = cores)


