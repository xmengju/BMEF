
library(pracma)
library(splines)

n <- 20 # number of subjects
J <- 3 # number of conditions
TT <- 50 # time points 
FF <- 50 # frequency points 
K_T <- 6 # number of marginal functions for time dimension 
K_F <- 6 # number of marginal functions for frequency dimension 
R <- 2 # true rank
p <- 2 # number of covariates

set.seed(123)
U <- randortho(K_T)[,1:R]
V <- randortho(K_F)[,1:R]
X <- cbind(rep(1,n), runif(n, -3, 3))

Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2,  Sigma2_omega = rep(0.4^2, n))


Delta <- array(runif(J*R*p, 2, 4), dim = c(J, R, p))/4
entries_idx <- rbinom(J* R*p, 1,0.5)
Delta[entries_idx ] <- -Delta[entries_idx] # introduce some negative values

dat <- dat.gen(seed = 1, n, J, TT, FF,  K_T, K_F, U, V, Delta, X, Sigma2s)

params <- list(Sigma2_delta = rep(5, p), a_gamma = 3, b_gamma = 0.5, a_omega = 3, b_omega = 0.5,
               a_delta = 1, b_delta = 1)


n_burn <- 500
n_sample <- 200
tt <- dat$tt
ff <- dat$ff
Y <- dat$Y
JJ <- matrix(1, n, J)
R_max <- 4 # maximum rank for rank selection

bmef_1 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-1", threshold = 0.01, save_all = FALSE)
bmef_2 <- bmef(Y, X, JJ,  tt, ff, R = R_max, K_T, K_F,  n_burn, n_sample, params = NULL, alg_type = "BMEF-2", threshold = 0.01, save_all = FALSE)






bmef_obj <- bmef_1; 
cred_level <- 0.95 
res_infer_decompose <- inference.decompose.bmef(bmef_obj, cred_level)
res_infer_mixed <- inference.mixed.bmef(bmef_obj) 


levelplot(res_infer_mixed$B_s[ii,, ])
levelplot(matrix(dat$O_tilde%*%c(dat$B[ii, ,]), TT, FF))   # true fixed effect





# use the same color scheme, ggplot

pp <- ggplot(dat2plot, aes(x = tt, y = ff, fill = value)) +
  geom_tile() +
  scale_fill_viridis_c() +  # Heatmap color scale
  facet_wrap(~rank,nrow = 1) + 
  labs(x = "Time",
       y = "Frequency",
       fill = "Value") +    theme(panel.background = element_blank(),
                                  plot.background = element_blank(),
                                  panel.grid.major.x = element_blank(),   
                                  panel.grid.minor.x = element_blank()
       )  +  theme(strip.text = element_text(size = 12, face = "bold"))







plot(res_infer_mixed$B_s[ii, ,],matrix(dat$O_tilde%*%c(dat$B[ii,,]), TT, FF) )
abline(a = 0, b = 1, col = "red")




plot(res_infer_mixed$C_s[ii,jj, ,],matrix(dat$O_tilde%*%c(dat$C[ii,jj,,]), TT, FF) )
abline(a = 0, b = 1, col = "red")

levelplot(res_infer_mixed$C_s[ii,jj, ,])
levelplot(matrix(dat$O_tilde%*%c(dat$C[ii,jj,,]), TT, FF))  


levelplot(res_infer_mixed$A_s[ii,jj,,])
levelplot(matrix(dat$O_tilde%*%c(dat$A[ii,jj,,]), TT, FF))  



levelplot(matrix(dat$O_tilde%*%(apply(bmef_obj$alpha_s,c(2,3,4), FUN = mean)[,jj,ii]), TT, FF))



# times 
levelplot(res_infer_decompose$base_patterns$m[1,,]*res_infer_decompose$weights_vals$m[1,ii,jj] + res_infer_decompose$base_patterns$m[2,,]*res_infer_decompose$weights_vals$m[2, ii, jj])















res_predict <- predict.bmef(bmef_obj, X_pred = X, tt_pred = tt, ff_pred = ff, cred_level)
  
  

R <- length(tensor_model$R_indices)

dim(res_infer$marginal_t$m)

r_idx <- 2

levelplot(matrix(kronecker(res_infer$marginal_f$m[r_idx,], res_infer$marginal_t$m[r_idx,]), TT, FF))
levelplot(res_infer$base_patterns$m[r_idx,,])


dim(bmef_1$alpha_s)



dim(res_infer$weights_vals$m)
ii <- 10; jj <- 1











levelplot(matrix(O_tilde%*%apply(bmef_1$alpha_s, c(2,3,4))[,ii, jj,], FUN = mean), TT, FF))



## need to make ggplot plot and double check the correctness of the function
  



plot(res_infer$marginal_t$m[1,])

levelplot(res_infer$base_patterns$m[1,,])  
levelplot(res_infer$base_patterns$m[2,,]) 

## compare with true base pattern
subject_id <- 1; condition_id <- 1

## compare the fixed effect

levelplot(matrix(dat$O_tilde%*%c(dat$A[ii, jj, ,]), TT, FF))  
levelplot(matrix(dat$O_tilde%*%c(res_pred$A[ii, jj, ,]), TT, FF))  

## compare the subject-level random effect


levelplot(matrix(dat$O_tilde%*%c(dat$A[ii, jj, ,]), TT, FF))  



## compare the subject-level random effect





dim(bmef_1$v_s)



dim(bmef_1$v_s)



  
