do.exp.simple <- function(dat, TT, FF, JJ,  methods, control.list, seed){


  dat2return <- list()
  X <- dat$X
  Y <- dat$Y
  s_sd <- p <- ncol(X)


  if("simple" %in% methods){

    control.simple <- control.list$control.simple
    K_T <- control.simple$K_T; K_F <- control.simple$K_F
    K <- K_T*K_F
    R_max <- control.simple$R_max; n_sample <- control.simple$n_sample
    n_burn <-  control.simple$n_burn;  params <- control.simple$params
    inits <- control.simple$inits;  threshold <- control.simple$threshold


    tmp_prep <- prepocess(TT, FF, K_T, K_F)
    O <- tmp_prep$O
    O_tilde <- tmp_prep$O_tilde


    tt_simple <-  system.time(simple_model <- tensor.decomp.ssl(seed, Y, X, JJ, TT, FF, R = R_max, K_T, K_F, n_sample, n_burn, params = params, inits  = inits, save_all = FALSE, type_simple = TRUE, threshold = threshold))




    K <- K_T*K_F
    pred_fix_simple_0 <- array(0, dim = c(J, TT, FF))
    pred_fix_simple_1 <- array(0, dim = c(J, TT, FF))
    pred_fix_simple_2 <- array(0, dim = c(J, TT, FF))
    pred_fix_simple_all <- pred_fix_simple_all_u <- pred_fix_simple_all_l <- array(NA, dim = c(n, J, TT, FF))
    pred_ran_b_simple <- array(NA,dim = c(n, TT, FF))
    pred_ran_c_simple <- array(NA,dim = c(n,J, TT, FF))


    sample_idx <- 1:n_sample

    UV_patch_vec_s <- array(NA, dim = c(length(sample_idx), length(simple_model$R_indices), dim(simple_model$v_s)[3]* dim(simple_model$u_s)[3]))
    for(ss in 1:length(sample_idx)){
      for(rr in  1:length(simple_model$R_indices)){
        UV_patch_vec_s[ss ,rr,] <- kronecker(simple_model$v_s[ss , simple_model$R_indices[rr],],simple_model$u_s[ss, simple_model$R_indices[rr],])
      }
    }

    for(jj in 1:J){

      tmp_0 <-  tmp_1 <-  tmp_2 <- matrix(0, length(sample_idx), K)

      for(rr_idx in   1:length(simple_model$R_indices)){

        for(ss in 1:length(sample_idx)){

          if(p == 3){
            tmp_0[ss,]  <- tmp_0[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
            tmp_1[ss,]  <- tmp_1[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
            tmp_2[ss,]  <- tmp_2[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 3] * UV_patch_vec_s[ss,rr_idx, ]
          }

          if(p == 2){
            tmp_0[ss,]  <- tmp_0[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
            tmp_1[ss,]  <- tmp_1[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
          }
          if(p == 1){
            tmp_0[ss,]  <- tmp_0[ss,]  +  simple_model$delta_s[ss, jj, simple_model$R_indices[rr_idx],] * UV_patch_vec_s[ss,rr_idx, ]
          }
        }
      }

      pred_fix_simple_0[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_0), 1, mean), TT, FF)

      if(p == 2){
        pred_fix_simple_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
        pred_fix_simple_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
      }
      if(p == 3){
        pred_fix_simple_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
        pred_fix_simple_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
      }
    }

    for(ii in 1:dim(Y)[1]){
      pred_ran_b_simple[ii,,] <- matrix(O_tilde%*%  apply(simple_model$gamma_s[sample_idx, , ii],2, mean), TT, FF)
    }

    for(ii in 1:dim(Y)[1]){

      for(jj in 1:J){
        pred_fix_simple_all[ii,jj,, ] <-  matrix( apply( O_tilde%*%  t(simple_model$alpha_s[sample_idx, ,jj, ii]),1, mean), TT, FF)
        pred_fix_simple_all_u[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(simple_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.975)}), TT, FF)
        pred_fix_simple_all_l[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(simple_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.025)}), TT, FF)
        pred_ran_c_simple[ii,jj,, ] <- matrix(O_tilde%*%apply(simple_model$omega_s[sample_idx, ,jj, ii],2, mean), TT, FF)
      }
    }


    dat2summary <-  list(dat = dat, R_indices_simple = simple_model$R_indices, tt_simple = tt_simple,
                         Sigma2_s_simple = simple_model$Sigma2_s,
                         v_s_simple = simple_model$v_s,
                         u_s_simple = simple_model$u_s,
                         delta_s_simple = simple_model$delta_s,
                         pred_fix_simple_all = pred_fix_simple_all,
                         pred_fix_simple_all_u = pred_fix_simple_all_u,
                         pred_fix_simple_all_l = pred_fix_simple_all_l,
                         pred_fix_simple_0 = pred_fix_simple_0,
                         pred_fix_simple_1 = pred_fix_simple_1,
                         pred_fix_simple_2 = pred_fix_simple_2,
                         pred_ran_b_simple = pred_ran_b_simple,
                         pred_ran_c_simple = pred_ran_c_simple)

    deltas_simple <- list(delta_m = apply(simple_model$delta, c(2,3,4), mean), delta_l = apply(simple_model$delta, c(2,3,4), function(u){quantile(u,0.025)}),
                          delta_u =apply(simple_model$delta, c(2,3,4), function(u){quantile(u,0.975)}))


    us_simple <- list(u_m = apply(simple_model$u_s, c(2,3), mean), u_l = apply(simple_model$u_s, c(2,3), function(u){quantile(u,0.025)}),
                      u_u = apply(simple_model$u_s, c(2,3), function(u){quantile(u,0.975)}))

    vs_simple <- list(v_m = apply(simple_model$v_s, c(2,3), mean), v_l = apply(simple_model$v_s, c(2,3), function(u){quantile(u,0.025)}),
                      v_u = apply(simple_model$v_s, c(2,3), function(u){quantile(u,0.975)}))

    dat2return  <- c(dat2return,  list(tt_simple = tt_simple,  R_indices_simple = simple_model$R_indices, BMEF_simple_summary =  summary_BMEF_simple(dat2summary), deltas_simple = deltas_simple, us_simple = us_simple,
                     vs_simple = vs_simple))

    rm(simple_model)
  }

  if("regular" %in% methods){

    control.regular <- control.list$control.regular
    K_T <- control.regular$K_T; K_F <- control.regular$K_F
    R_max <- control.regular$R_max; n_sample <- control.regular$n_sample
    n_burn <-  control.regular$n_burn;  params <- control.regular$params
    inits <- control.regular$inits;  threshold <- control.regular$threshold
    #control.regular$params$aa_omega <- 20
    tmp_prep <- prepocess(TT, FF, K_T, K_F)
    O <- tmp_prep$O
    O_tilde <- tmp_prep$O_tilde

    #n_sample <- 500
    #n_burn <- 500
    tt_regular <-  system.time(regular_model <- tensor.decomp.ssl(seed, Y, X, JJ, TT, FF, R = R_max, K_T, K_F, n_sample, n_burn, params = params, inits  = inits, save_all = FALSE, type_simple = FALSE, threshold = threshold))

    K <- K_T*K_F
    pred_fix_regular_0 <- array(0, dim = c(J, TT, FF))
    pred_fix_regular_1 <- array(0, dim = c(J, TT, FF))
    pred_fix_regular_2 <- array(0, dim = c(J, TT, FF))
    pred_fix_regular_all <- pred_fix_regular_all_u <- pred_fix_regular_all_l <- array(NA, dim = c(n, J, TT, FF))
    pred_ran_b_regular <- array(NA,dim = c(n, TT, FF))
    pred_ran_c_regular <- array(NA,dim = c(n,J, TT, FF))


    sample_idx <- 1:n_sample

    UV_patch_vec_s <- array(NA, dim = c(length(sample_idx), length(regular_model$R_indices), dim(regular_model$v_s)[3]* dim(regular_model$u_s)[3]))
    for(ss in 1:length(sample_idx)){
      for(rr in  1:length(regular_model$R_indices)){
        UV_patch_vec_s[ss ,rr,] <- kronecker(regular_model$v_s[ss , regular_model$R_indices[rr],],regular_model$u_s[ss, regular_model$R_indices[rr],])
      }
    }

    for(jj in 1:J){

      tmp_0 <-  tmp_1 <-  tmp_2 <- matrix(0, length(sample_idx), K)

      for(rr_idx in   1:length(regular_model$R_indices)){

        for(ss in 1:length(sample_idx)){

          if(p == 3){
            tmp_0[ss,]  <- tmp_0[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
            tmp_1[ss,]  <- tmp_1[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
            tmp_2[ss,]  <- tmp_2[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 3] * UV_patch_vec_s[ss,rr_idx, ]
          }

          if(p == 2){
            tmp_0[ss,]  <- tmp_0[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 1] * UV_patch_vec_s[ss,rr_idx, ]
            tmp_1[ss,]  <- tmp_1[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx], 2] * UV_patch_vec_s[ss,rr_idx, ]
          }
          if(p == 1){
            tmp_0[ss,]  <- tmp_0[ss,]  +  regular_model$delta_s[ss, jj, regular_model$R_indices[rr_idx],] * UV_patch_vec_s[ss,rr_idx, ]
          }
        }
      }

      pred_fix_regular_0[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_0), 1, mean), TT, FF)

      if(p == 2){
        pred_fix_regular_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
        pred_fix_regular_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
      }
      if(p == 3){
        pred_fix_regular_1[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_1), 1, mean), TT, FF)
        pred_fix_regular_2[jj,,] <- matrix( apply(O_tilde %*%  t(tmp_2), 1, mean), TT, FF)
      }
    }

    for(ii in 1:dim(Y)[1]){
      pred_ran_b_regular[ii,,] <- matrix(O_tilde%*%  apply(regular_model$gamma_s[sample_idx, , ii],2, mean), TT, FF)
    }

    for(ii in 1:dim(Y)[1]){

      for(jj in 1:J){
        pred_fix_regular_all[ii,jj,, ] <-  matrix( apply( O_tilde%*%  t(regular_model$alpha_s[sample_idx, ,jj, ii]),1, mean), TT, FF)
        pred_fix_regular_all_u[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(regular_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.975)}), TT, FF)
        pred_fix_regular_all_l[ii,jj,, ] <-   matrix( apply( O_tilde%*%  t(regular_model$alpha_s[sample_idx, ,jj, ii]),1, function(u){quantile(u, 0.025)}), TT, FF)
        pred_ran_c_regular[ii,jj,, ] <- matrix(O_tilde%*%apply(regular_model$omega_s[sample_idx, ,jj, ii],2, mean), TT, FF)
      }
    }

    dat2summary <-  list(dat = dat, R_indices_regular = regular_model$R_indices, tt_regular = tt_regular,
                         Sigma2_s_regular = regular_model$Sigma2_s,
                         v_s_regular = regular_model$v_s,
                         u_s_regular = regular_model$u_s,
                         delta_s_regular = regular_model$delta_s,
                         pred_fix_regular_all = pred_fix_regular_all,
                         pred_fix_regular_all_u = pred_fix_regular_all_u,
                         pred_fix_regular_all_l = pred_fix_regular_all_l,
                         pred_fix_regular_0 = pred_fix_regular_0,
                         pred_fix_regular_1 = pred_fix_regular_1,
                         pred_fix_regular_2 = pred_fix_regular_2,
                         pred_ran_b_regular = pred_ran_b_regular,
                         pred_ran_c_regular = pred_ran_c_regular)

    deltas_regular <- list(delta_m = apply(regular_model$delta, c(2,3,4), mean), delta_l = apply(regular_model$delta, c(2,3,4), function(u){quantile(u,0.025)}),
                          delta_u =apply(regular_model$delta, c(2,3,4), function(u){quantile(u,0.975)}))

    us_regular <- list(u_m = apply(regular_model$u_s, c(2,3), mean), u_l = apply(regular_model$u_s, c(2,3), function(u){quantile(u,0.025)}),
                      u_u = apply(regular_model$u_s, c(2,3), function(u){quantile(u,0.975)}))

    vs_regular <- list(v_m = apply(regular_model$v_s, c(2,3), mean), v_l = apply(regular_model$v_s, c(2,3), function(u){quantile(u,0.025)}),
                      v_u = apply(regular_model$v_s, c(2,3), function(u){quantile(u,0.975)}))

    dat2return  <- c(dat2return,  list(tt_regular = tt_regular,  R_indices_regular = regular_model$R_indices, BMEF_regular_summary =  summary_BMEF_regular(dat2summary), deltas_regular = deltas_regular, us_regular = us_regular,
                                       vs_regular = vs_regular))

    rm(regular_model)
  }


  if("flfosr" %in% methods){

    control.flfosr <- control.list$control.flfosr
    shp <- control.flfosr$shp
    Sburn <- control.flfosr$Sburn
    S <- control.flfosr$S
    kt <- control.flfosr$kt
    tt_flfosr <- list()

    z_flfosr <- rep(1:n, each = J)
    pred_fix_flfosr_0 <- pred_fix_flfosr_1 <- pred_fix_flfosr_2 <- array(NA,dim = c(J, TT, FF))
    pred_fix_flfosr_all <-   pred_fix_flfosr_all_u <-  pred_fix_flfosr_all_l <- array(NA, dim = c(n, J, TT, FF))
    pred_ran_b_flfosr <- array(NA,dim = c(n, TT, FF))
    pred_ran_c_flfosr <- array(NA,dim = c(n,J, TT, FF))

    for(ff in 1:FF){ # fit separately for each frequency
      Y_flfosr <- matrix(NA, J*n, TT)
      for(ii in 1:dim(Y)[1]){
        for(jj in 1:J){
          Y_flfosr[(ii-1)*J+ jj, ] <- matrix(Y[ii,jj,], TT, FF)[,ff]
        }
      }

      if(p == 3){
        X_flfosr <- matrix(cbind(dummy_cols(rep(1:J, n))[,-1], rep(X[,2],each= J)* (dummy_cols(rep(1:J, n))[,-1]),rep(X[,3],each= J)* (dummy_cols(rep(1:J, n))[,-1]) ))
        X_flfosr <- as.matrix(data.frame(lapply(X_flfosr, as.numeric)))
        colnames(X_flfosr) <- NULL
      }


      if(p == 2){
        #X_flfosr <- matrix(cbind(dummy_cols(rep(1:J, n))[,2:J], rep(X[,2],each= J)* (dummy_cols(rep(1:J, n))[,-1])))

        X_flfosr <- matrix(cbind((dummy_cols(rep(1:J, n))[,-1]), rep(X[,2],each= J)* (dummy_cols(rep(1:J, n))[,-1])))
        X_flfosr <- as.matrix(data.frame(lapply(X_flfosr, as.numeric)))
        colnames(X_flfosr) <- NULL
      }

      if(p == 1){
        X_flfosr <- dummy_cols(rep(1:J, n))[,-1]
        X_flfosr <- as.matrix(data.frame(lapply(X_flfosr, as.numeric)))
        colnames(X_flfosr) <- NULL
      }


      tt_flfosr[[ff]] <-  system.time(flfosr_model <- flfosr_new(Y = t(Y_flfosr), X = X_flfosr, z = z_flfosr, k = kt, S  = S, S_burn = Sburn,  varhyp = list(a_a = shp[1], b_a = shp[2], a_g = shp[3], b_g = shp[4], a_w = shp[5], b_w = shp[6])))

      alphaf_mean <- apply(sapply(flfosr_model$alphaf_post, fosrcoef), 2, function(x) x$alphaf_mean)


      sub_alpha_list <- flfosr_model$alpha_post

      alpha_s <- array(NA, dim = c(length(sub_alpha_list),  kt, ncol(X_flfosr)))
      for(s in 1:length( sub_alpha_list)){
        alpha_s[s,,] <- t(sub_alpha_list[[s]])
      }

      #avg_alpha <- Reduce("+", sub_alpha_list) / length(sub_alpha_list)

      for(jj in 1:J){
        if(p == 3){
          pred_fix_flfosr_0[jj,,ff] <-alphaf_mean[,jj]
          pred_fix_flfosr_1[jj,,ff] <-alphaf_mean[,jj+J]
          pred_fix_flfosr_2[jj,,ff] <-alphaf_mean[,jj+2*J]
        }
        if(p == 2){
          pred_fix_flfosr_0[jj,,ff] <-alphaf_mean[,jj]
          pred_fix_flfosr_1[jj,,ff] <-alphaf_mean[,jj+J]
        }
        if(p == 1){
          pred_fix_flfosr_0[jj,,ff] <-alphaf_mean[,jj]
        }
      }

      kk <- 0
      for(ii in 1:dim(Y)[1]){
        for(jj in 1:J){
          kk <- kk + 1
          pred_fix_flfosr_all[ii,jj, , ff] <-   apply(flfosr_model$B%*% t(apply(alpha_s, c(1, 2), function(x) sum(x * X_flfosr[kk, ]))), 1, mean)
          pred_fix_flfosr_all_u[ii,jj, , ff] <- apply(flfosr_model$B%*% t(apply(alpha_s, c(1, 2), function(x) sum(x * X_flfosr[kk, ]))), 1, function(u){quantile(u,0.975)})
          pred_fix_flfosr_all_l[ii,jj, , ff] <-  apply(flfosr_model$B%*% t(apply(alpha_s, c(1, 2), function(x) sum(x * X_flfosr[kk, ]))), 1, function(u){quantile(u,0.025)})
        }
      }


      sub_ga_list <- flfosr_model$ga_post
      sub_omega_list <- flfosr_model$w_post

      ga_s <- array(NA, dim = c(length(sub_ga_list),  kt, n))
      for(s in 1:length( sub_alpha_list)){
        ga_s[s,,] <- t(sub_ga_list[[s]])
      }

      omega_s <- array(NA, dim = c(length(sub_ga_list),  kt, n*J))
      for(s in 1:length( sub_alpha_list)){
        omega_s[s,,] <- t(sub_omega_list[[s]])
      }

      for(ii in 1:dim(Y)[1]){
        pred_ran_b_flfosr[ii,,ff] <-  apply(flfosr_model$B%*% t(ga_s[,,ii]), 1, mean)
      }


      kk <- 0
      for(ii in 1:dim(Y)[1]){
        for(jj in 1:J){
          kk <- kk + 1
          pred_ran_c_flfosr[ii,jj,, ff] <-  apply(flfosr_model$B%*% t(omega_s[,,kk]), 1, mean)
        }
      }
    }


    dat2summary <- list(dat= dat, pred_fix_flfosr_0 = pred_fix_flfosr_0,
         pred_fix_flfosr_1 = pred_fix_flfosr_1,
         pred_fix_flfosr_2 = pred_fix_flfosr_2,
         pred_fix_flfosr_all = pred_fix_flfosr_all,
         pred_fix_flfosr_all_u= pred_fix_flfosr_all_u,
         pred_fix_flfosr_all_l = pred_fix_flfosr_all_l,
         pred_ran_b_flfosr = pred_ran_b_flfosr,
         pred_ran_c_flfosr = pred_ran_c_flfosr)


    dat2return  <- c(dat2return,  list(tt_flfosr = tt_flfosr, FLFOSR_summary =  summary_FLFOSR(dat2summary)))

    rm(flfosr_model)

  }

  if("bayes" %in% methods){ # this should perform automatic selection only evaluate the fixed effects

    thin <- 1; nchain <- 1
    control.bayes <- control.list$control.bayes

    K_T <- control.bayes$K_T; K_F <- control.bayes$K_F
    q1 <- control.bayes$q1;  q2 <-  control.bayes$q2
    iter <- control.bayes$iter;  burnin <- control.bayes$burnin

    pred_fix_bayes_0 <- pred_fix_bayes_1 <- pred_fix_bayes_2 <- array(NA,dim = c(J, TT, FF))
    pred_fix_bayes_all <- pred_fix_bayes_all_u <- pred_fix_bayes_all_l <- array(NA, dim = c(n, J, TT, FF))
    pred_ran_c_bayes <- array(NA,dim = c(n,J, TT, FF))

    tt <- seq(from = 0, to = 1, length.out = TT)
    ff <- seq(from = 0, to = 1, length.out = FF)


    Bt <- ns(tt,  knots = seq(0, 1, length.out = K_T)[2:(K_T-1)], intercept = TRUE)
    Bf <- ns(ff,  knots = seq(0, 1, length.out = K_F)[2:(K_F-1)], intercept = TRUE)

    tt_bayes <- list()

    for(jj in 1:J){
      Y_bayes <- lapply(1:n, function(i) Y[i,jj,]) # has been vectorized
      missing <- list()
      for(ii in 1:n){
        missing[[ii]] <- numeric(0)
      }

      tt_bayes[[jj]] <-  system.time(bayes_model <- run_mcmc(y = Y_bayes, missing, X, splineS = as.matrix(Bf),  splineT = as.matrix(Bt),  q1, q2, iter, thin, burnin, nchain))

      Bf_new <- Bf%*% apply(bayes_model$Gamma[1,1][[1]][,,((burnin+1):iter)], c(1,2), mean)
      Bt_new <- Bt%*%apply(bayes_model$Lambda[1,1][[1]][,,((burnin+1):iter)], c(1,2), mean)

      kronecker_ori <- kronecker(Bf, Bt)

      kronecker_tmp <- kronecker(Bf_new, Bt_new)
      Betas <- bayes_model$Beta[1,1][[1]][,,((burnin+1):iter)]

      Thetas <- array(NA, dim = c(K_T*K_F, n, iter - burnin))
      for(s in (burnin+1):iter){
        Thetas[,,s - burnin] <- matrix(bayes_model$Theta[1,s][[1]], ncol = n)
      }

      #Beta_mean <- apply(bayes_model$Beta[1,1][[1]][,,((burnin+1):iter)], c(1,2), mean)
      if(p == 1){

        for(ii in 1:n){
          pred_fix_bayes_all[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(1, 2), function(x) sum(x * X[ii])), 1, mean),TT, FF)
          pred_fix_bayes_all_l[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(1, 2), function(x) sum(x * X[ii])), 1, function(u){quantile(u,0.025)}),TT, FF)
          pred_fix_bayes_all_u[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(1, 2), function(x) sum(x * X[ii])), 1, function(u){quantile(u,0.975)}),TT, FF)
        }
        pred_fix_bayes_0[jj,,] <- pred_fix_bayes_all[ii, jj, , ]

      }
      if(p == 2){
        for(ii in 1:n){
          pred_fix_bayes_all[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(2, 3), function(x) sum(x * X[ii,])), 1, mean),TT, FF)
          pred_fix_bayes_all_l[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(2, 3), function(x) sum(x * X[ii,])), 1, function(u){quantile(u,0.025)}),TT, FF)
          pred_fix_bayes_all_u[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(2, 3), function(x) sum(x * X[ii,])), 1, function(u){quantile(u,0.975)}),TT, FF)

          pred_fix_bayes_0[jj,,] <- matrix(apply(kronecker_tmp %*% Betas[1,,], 1, mean),TT, FF)
          pred_fix_bayes_1[jj,,]<-  matrix(apply(kronecker_tmp %*% Betas[2,,], 1, mean),TT, FF)
        }
      }
      if(p == 3){
        for(ii in 1:n){
          pred_fix_bayes_all[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(2, 3), function(x) sum(x * X[ii,])), 1, mean),TT, FF)
          pred_fix_bayes_all_l[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(2, 3), function(x) sum(x * X[ii,])), 1, function(u){quantile(u,0.025)}),TT, FF)
          pred_fix_bayes_all_u[ii, jj, , ] <- matrix(apply(kronecker_tmp %*% apply(Betas, c(2, 3), function(x) sum(x * X[ii,])), 1, function(u){quantile(u,0.975)}),TT, FF)
          pred_fix_bayes_0[jj,,] <- matrix(apply(kronecker_tmp %*% Betas[1,,], 1, mean),TT, FF)
          pred_fix_bayes_1[jj,,]<-  matrix(apply(kronecker_tmp %*% Betas[2,,], 1, mean),TT, FF)
          pred_fix_bayes_2[jj,,]<-  matrix(apply(kronecker_tmp %*% Betas[3,,], 1, mean),TT, FF)

        }
      }


      for(ii in 1:n){
        pred_ran_c_bayes[ii,jj, ,] <- matrix(apply(kronecker_ori %*% Thetas[,ii,], 1, mean), TT, FF) - pred_fix_bayes_all[ii,jj,,]
      }

    }





    dat2summary <-  list(dat = dat, tt_bayes =  tt_bayes, pred_fix_bayes_0 = pred_fix_bayes_0,
                         pred_fix_bayes_1 = pred_fix_bayes_1, pred_fix_bayes_2 = pred_fix_bayes_2,
                         pred_ran_c_bayes = pred_ran_c_bayes,
                         pred_fix_bayes_all =  pred_fix_bayes_all,
                         pred_fix_bayes_all_u =  pred_fix_bayes_all_u,
                         pred_fix_bayes_all_l =  pred_fix_bayes_all_l)
    dat2return  <- c(dat2return,  list(tt_bayes =  tt_bayes, Bayes_summary =  summary_Bayes(dat2summary)))

    rm(bayes_model)

  }

  if("mhpca" %in% methods){

    control.mhpca <- control.list$control.mhpca
    nknots <- control.mhpca$nknots

    pred_fix_mhpca <- array(0, dim = c(J, TT, FF))
    pred_ran_b_mhpca <- array(NA,dim = c(n, TT, FF))
    pred_ran_c_mhpca <- array(NA,dim = c(n, J, TT, FF))

    tt <- seq(from = 0, to = 1, length.out = TT)
    ff <- seq(from = 0, to = 1, length.out = FF)

    t_f_grid <- expand.grid(tt, ff)

    dat_mhpca <- NULL
    for(ii in 1:dim(Y)[1]){
      for(jj in 1:J){
        dat_mhpca <- rbind(dat_mhpca, cbind(rep(paste("Subject", ii), nrow(t_f_grid)),
                                            rep("Group 1", nrow(t_f_grid)),  t_f_grid[,1], t_f_grid[,2],  Y[ii,jj, ], rep(paste("Repetition", jj),  nrow(t_f_grid))))
      }
    }

    # time -> func; frequency -> region
    colnames(dat_mhpca) <- c("Subject", "Group", "func", "reg", "y", "Repetition")
    maxiter <- 500
    dat_mhpca <- data.frame(dat_mhpca)
    dat_mhpca$reg <- as.numeric(dat_mhpca$reg)
    dat_mhpca$func <- as.numeric(dat_mhpca$func)
    dat_mhpca$y <- as.numeric(dat_mhpca$y)

    # formulate data in long format
    tt_mhpca <-  system.time(mhpca_model  <- MHPCA_decomp(data  = dat_mhpca, fve_cutoff = 0.8,
                                                          nknots = nknots,  maxiter = maxiter,
                                                          epsilon = 1e-3, reduce  = TRUE, quiet = FALSE))


    for(jj in 1:J){
      pred_fix_mhpca[jj,,] <- matrix(dplyr::filter(mhpca_model$eta, Repetition  ==  paste("Repetition", jj))$eta, TT, FF)
    }


    for(ii in 1:n){
      for(jj in 1:J){
        pred_ran_c_mhpca[ii,jj,,] <-  matrix(dplyr::filter(mhpca_model$data$`Group 1`, (Subject  ==  paste("Subject", ii)) &  (Repetition  ==  paste("Repetition", jj)))$w_i, TT, FF)
      }
      pred_ran_b_mhpca[ii,,] <-  matrix(dplyr::filter(mhpca_model$data$`Group 1`, (Subject  ==  paste("Subject", ii)) &  (Repetition  ==  paste("Repetition", 1)))$z_i, TT, FF)
    }

    rm(mhpca_model)

    dat2summary <- list(dat = dat, pred_fix_mhpca = pred_fix_mhpca,
                        pred_ran_b_mhpca = pred_ran_b_mhpca,
                        pred_ran_c_mhpca = pred_ran_c_mhpca)
    dat2return  <- c(dat2return,  list(tt_mhpca =  tt_mhpca,  MHPCA_summary =  summary_MHPCA(dat2summary)))

  }
  return(dat2return)

}

