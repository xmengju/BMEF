### prep for experiment with misisng conditions 
### set up simulations 
rm(list = ls())

args <- commandArgs(trailingOnly = TRUE) 

library(splines)
library(pracma)
library(lattice)
library(gridExtra) 
library(mcompanion)
library(MASS)
library(mvtnorm)
library(tidyr)
library(ggplot2)
library(gtools) 
library(simdd)
library(VGAM)
library(dplyr)
library(tidyverse)
library(ggh4x)
library(posterior)
library(refund)
library(face)
library(Rcpp)
library(splines)
library(LFBayes)
library(plotly)
library(fastDummies)
library(tictoc)
library(fANCOVA)


if(length(args)== 0){ # test locally
  test <- TRUE
  setwd("/Users/xmengju/Tensor_EEG/Code/0601")
  exp_id <- 6
  p <- s_id <- 1
  methods_id <-2
  dir_save = "../../Results_tmp_miss"
  
  shp <- c(.1,.1,.1,.1,.1,.1)  
  Sburn <- 100; S <- 140; 
  q1 <- 4; q2 <- 4 
  K_T <- 6; K_F <- 6
  kt <- K_T
  burnin <- 1000; iter <- 1400; 
  n_sample <- 50; n_burn <- 10
  nknots <- 6
}else{
  test <- FALSE
  exp_id <- as.numeric(args[1]) 
  p <- s_id <- as.numeric(args[2]) 
  methods_id <- as.numeric(args[3]) 
  
  dir_save = "../../Results_miss"
  
  shp <- c(.1,.1,.1,.1,.1,.1) 
  Sburn <- 1000; S <- 1500; #  flfosr
  q1 <- 4; q2 <- 4 # dimensions for bayes
  K_T <- 6; K_F <- 6
  kt <- K_T
  burnin <- 1000; iter <- 1400;  # bayes
  n_sample <- 400; n_burn <- 800 # out method
  nknots <- 6 # mhpca
}

source("summary_individual_method.R")
source("fun_gen.R")
source("fun_exp_simple_missing.R")
source("helper.R")
source("tensor_ssl.R")
source("competitors/sun_code/helper_functions.R")
source("competitors/sun_code/flfosr_new.R")
source("competitors/sun_code/gen_flfosr.R")
source("competitors/sun_code/other_model_functions/fgee.R")
source("competitors/sun_code/other_model_functions/gibbs_mult_fpca2.R")
source("competitors/sun_code/other_model_functions/FUI/lfosr3s.R")
source("competitors/mhpca/R/m-hpca-revised.R")
source("competitors/mhpca/R/mm-alg.R")
source("competitors/mhpca/R/utils-pipe.R")
source("competitors/mhpca/R/predictor.R")
source("competitors/mhpca/R/rho.R")


# some fixed parameters
J <- 3; n <- 100


TT <- 50
FF <- 50
K_T <- K_F <- 6

if(methods_id == 1){
  ncol_num <- 2; 
  rs <- c(2,3,4);
}else{
  ncol_num <- 1; 
  rs <- c(2);
}

if(methods_id == 3){
  ncol_num <- 5;
  rs <- c(2:4)
}

seeds <- 1:20; 



hs <- c("H2");
R_max <- 5; inits <- NULL; threshold <- 0.05

params <- list(Sigma2_theta = 1, Sigma2_eta = 1, Sigma2_delta = rep(5, p), 
               aa_gamma = 3, bb_gamma = 0.5, aa_omega = 3, bb_omega = 0.5)

control.simple <- list(K_T = K_T, K_F = K_F, R_max = R_max, n_sample = n_sample, n_burn = n_burn, params = params, inits = inits, threshold  = threshold)
control.regular <- list(K_T = K_T, K_F = K_F, R_max = R_max, n_sample = n_sample, n_burn = n_burn, params = params, inits = inits, threshold  = threshold)
control.flfosr <- list(shp  = shp, Sburn  = Sburn, S = S, kt = kt)
control.bayes <- list(K_T = K_T, K_F = K_F, q1 = q1, q2 = q2, iter =iter, burnin = burnin) 
control.mhpca <- list(nknots = nknots)

control.list <- list(control.simple = control.simple, control.regular = control.regular, 
                     control.flfosr = control.flfosr, control.bayes = control.bayes, 
                     control.mhpca = control.mhpca)

if(methods_id == 1){
  methods <- c("regular")
}

if(methods_id == 2){
  methods <- c("mhpca")
}

if(methods_id == 3){
  methods <- c("flfosr", "bayes")
}


props <- c(0.2,0.4)
all_exps <- expand.grid(rs, hs, seeds, props)
colnames(all_exps) <- c("r", "h", "seed", "prop")


if(nrow(all_exps)%%ncol_num!=0){
  
  if(nrow(all_exps)%%ncol_num!=0){
    conduct_sheet <- matrix(c(1:nrow(all_exps), rep(NA, ncol_num - nrow(all_exps)%%ncol_num)), ncol = ncol_num, byrow = T)
  }else{
    conduct_sheet <- matrix(c(1:nrow(all_exps)), ncol = ncol_num,  byrow = T)
  }
}else{
  conduct_sheet <- matrix(1:nrow(all_exps), ncol = ncol_num, byrow = T)
}


print(dim(conduct_sheet))

if(dir.exists(dir_save) == FALSE){
  dir.create(dir_save)
}


conduct.exp <- function(exp_id = 1, conduct_sheet){
  
  for(i in 1:ncol(conduct_sheet)) {
    print(c(i,"th trial"))
    if(!is.na(conduct_sheet[exp_id,i])){
      seed <- all_exps[conduct_sheet[exp_id, i],]$seed
      H <- all_exps[conduct_sheet[exp_id, i],]$h
      R <- all_exps[conduct_sheet[exp_id, i],]$r 
      prop <- all_exps[conduct_sheet[exp_id, i],]$prop
      
      set.seed(seed)
      X <- x.gen(seed, n, p); X[,1] <- 1
      if(p == 3){
        X[, 3] <- rbinom(n, 1, 0.5)
      }
      UV <- u.v.gen(seed, K_T, K_F, R)
      U <-  UV$U; V <- UV$V
      Delta <- delta.gen(seed, J, R, p)
      
      Delta <-  Delta/4
      if(H == "H1"){
        Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2, Sigma2_omega = rep(0.4^2,n))
      }else{
        Sigma2s <- list(Sigma2_epsilon = 0.1^2, Sigma2_gamma = 0.4^2,  Sigma2_omega = runif(n,0.2^2,1^2))
      }
      
      
      JJ <- matrix(1, n, J)
      
      missing_id <- sample(n, round(n*prop))
      missing_Js <- sample(1:J, length(missing_id), replace= TRUE)
      JJ[cbind(missing_id, missing_Js )] <- 0
 
      dat <- dat.gen(seed, n, J, TT, FF, K_T, K_F, U, V, Delta, X, Sigma2s)
      
      
      for(qq in 1:length(missing_id)){
          dat$Y[missing_id[qq],missing_Js[qq],] <- rep(NA, length(dat$Y[missing_id[qq],missing_Js[qq],]))
      }
      
      res <- do.exp.simple.missing(dat, TT, FF, JJ,  methods, control.list, seed)

      res$JJ <- JJ
      dir_name <- paste(dir_save, "/m_id_", methods_id,  "_s_", s_id, "_prop_", prop, "_n_",n,"_r_", R, "_h_", H, "/", sep = "")
      
      if(!(dir.exists(dir_name))){
        dir.create(dir_name)
      }
      
      saveRDS(file = paste(dir_name, "seed_", seed, ".RData", sep = ""), res)
      
    }
  }
} 

conduct.exp(exp_id = exp_id, conduct_sheet) 





