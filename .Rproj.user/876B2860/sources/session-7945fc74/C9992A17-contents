
# let's examine the decomposition of an individuals 
source("fun_gen.R")
source("helper.R")
source("tensor_ssl_original.R") # not seperating into ABC
figure_dir <- "/Users/xmengju/Tensor_EEG/Figures"


K_T <- 6; K_F <- 10
n_sample <- 400; n_burn <- 800
threshold <- 0.1

wl_val <- 50
ovlp_val <- 80
check_dim <- spectro(rnorm(256,100,1), f = 256, wl = wl_val, ovlp = ovlp_val, scale = TRUE, osc = TRUE, plot = FALSE)
dim_t <- length(check_dim$time)
dim_f <- length(check_dim$freq)
tt <- check_dim$time
ff <- check_dim$freq

TT <- 21
FF <- 25

dat <- readRDS("EEG.RData")

X <- dat$X
Y <- dat$Y
Y <- Y/2



tensor_model_simple <- readRDS(file= "tensor_simple.RData")
tensor_model <- tensor_model_simple
method_name <- "BMEF-2"
subject_idx <- c( which(X[,2] == 1)[1], which(X[,2] == 0)[1])

#tt <- seq(0, 1, length.out = TT)
#ff <- seq(0, 1, length.out = FF)

tmp_prep <- prepocess(TT, FF, K_T, K_F)
bsMat_tt <- tmp_prep$bsMat_tt
bsMat_ff <- tmp_prep$bsMat_ff
C_t <- tmp_prep$C_t
C_f <- tmp_prep$C_f
O_tilde <- tmp_prep$O_tilde


dat2plot <- NULL
sample_idx <- 1:n_sample
for(j in 1:J){ # plot for each subject 
  
  pp_list <- list()
  for(ii in subject_idx){
    grid <- expand.grid(tt = tt, ff = ff)
    grid$mat_a <-  O_tilde%*%apply(tensor_model$alpha_s[sample_idx,,j,subject_idx[1]], 2, mean)
    grid$mat_c <-  O_tilde%*%apply(tensor_model$alpha_s[sample_idx,,j,subject_idx[2]], 2, mean)
    grid$condition <- rep(c("C1", "C2", "C3")[j], length(tt)*length(ff))
    df_long <- pivot_longer(grid, 
                            cols = c("mat_a", "mat_c"),  # Columns to gather
                            names_to = "mat_type") 
    df_long$mat_type <- dplyr::recode(df_long$mat_type, "mat_a" = "Alcohol", "mat_c" = "Control")
    dat2plot  <- rbind(dat2plot,  df_long)
  }
}

dat2plot$value <- dat2plot$value*2
dat2plot$ff <- dat2plot$ff*1000




#pdf(paste(figure_dir, "/decomposition_J1.pdf", sep = ""),  width = 12, height = 4)
jj <- 1; ii <- 32
jj <- 2; ii <- 101


MM <- matrix(Y[ii,jj,], TT, FF)
M1 <- matrix(O_tilde%*%apply(tensor_model$alpha_s[,,jj,ii], 2, mean), TT, FF)
M2 <-  matrix(O_tilde%*%apply(tensor_model$gamma_s[,,ii], 2, mean), TT, FF)
M3 <-  matrix(O_tilde%*%apply(tensor_model$omega_s[,,jj,ii], 2, mean), TT, FF)
M4 <- MM  - M1 - M2 - M3 
z_range <- range(MM,M1, M2, M3,M4, na.rm = TRUE)
library(RColorBrewer)
my_cols <- colorRampPalette(brewer.pal(9, "YlGnBu"))(100)

grid <- expand.grid(tt = tt, ff = ff)

grid$Y <- c(MM)
grid$M1 <- c(M1)
grid$M2 <- c(M2)
grid$M3 <- c(M3)
grid$M4 <- c(M4)

dat2plot2 <- pivot_longer(grid, 
                        cols = c("Y", "M1", "M2", "M3", "M4"),  # Columns to gather
                        names_to = "mat_type")

dat2plot2$mat_type <- factor(dat2plot2$mat_type,
                            levels = c("Y", "M1", "M2", "M3", "M4"),
                            labels = c("Y[i~j]^T","A[j](X[i])^T", "B[i]^T", "C[i~j]^T", "E[i~j]^T")
)

dat2plot2$ff <- dat2plot2$ff*1000
dat2plot2$value <- dat2plot2$value*2
dat2plot2$mat_type <- factor(dat2plot2$mat_type)


zlim <- range(dat2plot$value, dat2plot2$value, na.rm = TRUE)

#library(viridis)
#breaks <- c(zlim[1], -5, -4.5,-4,-3, -2, -1, 1, 1.5, zlim[2])

breaks_tmp <- c(-5.3231666, -4.3132833, -3.3033999, -2.2935166, -1.2836333, -0.2737499,  0.7361334,  1.7460168,
 2.7559001,  3.7657835,  4.7756668,  5.7855502,  6.7954335,  7.8053168)
breaks <- seq(zlim[1], zlim[2], length.out = 14)

breaks <- c(zlim[1], breaks_tmp[2:13],zlim[2])

colors <- c("black", "#414487FF","#35608DFF", "#21918c", "#43BF71FF","#7AD151FF", "#BBDF27FF", "#fde725", "gold", "#FFC107", "orange","darkorange")


library(scales)



library(dplyr)
library(forcats)

#-- revised option 1
dat2plot$condition <-fct_recode(dat2plot$condition, "C[1] *' (Single image)'" = "C1",
                                "C[2] *' (Matched images)'" = "C2",
                                "C[3] *' (Non-matched images)'" = "C3")

#-- revised option 2
dat2plot$condition <-fct_recode(dat2plot$condition, "C1 (Single image)" = "C1",
                                "C2 (Matched images)" = "C2",
                                "C3 (Non-matched images)" = "C3")

dat2plot$mat_type[dat2plot$mat_type == "Alcohol"] <- "Alcoholics"

pp <- ggplot(dat2plot, aes(x = tt, y = ff, fill = value)) +
  geom_tile() +
  #scale_fill_viridis_c(limits = zlim) +  # Heatmap color scale
  scale_fill_gradientn(
    colours = colors,
    #breaks = breaks,
    breaks = pretty_breaks(n = 6),
    values = scales::rescale(breaks, from = zlim),
    limits = zlim #,
    #labels = breaks
    #labels = c(-5, -3, -1, 1, 3),
  ) + 
  facet_grid(mat_type~condition) +  # One panel per group
  #facet_grid(mat_type~condition,
  #           labeller = labeller(condition = label_parsed))+ 
  labs(x = "t (Sec)",
       y = "f (Hz)",
       fill = " ") +    theme(panel.background = element_blank(),
                              plot.background = element_blank(),
                              panel.grid.major.x = element_blank(),   
                              panel.grid.minor.x = element_blank(),
                              strip.text = element_text(size = 14, face = "bold")
       )+ theme(legend.key.height = unit(0.05, 'npc'))
print(pp)
#dev.off()


pp2 <- ggplot(dat2plot2, aes(x = tt, y = ff, fill = value)) +
  geom_tile() +
  #scale_fill_viridis_c() +  # Heatmap color scale
  scale_fill_gradientn(
    colours = colors,
    #breaks = breaks,
    breaks = pretty_breaks(n = 6),
    values = scales::rescale(breaks, from = zlim),
    limits = zlim 
  ) + 
  facet_wrap(~mat_type, nrow = 1, scales = "free_x",labeller = label_parsed) +  # One panel per group
  labs(x = "t (Sec)",
       y = "f (Hz)",
       fill = " ") +  theme(panel.background = element_blank(),
                            plot.background = element_blank(),
                            panel.grid.major.x = element_blank(),   
                            panel.grid.minor.x = element_blank(),
                            panel.spacing = unit(2, "lines"),
                            strip.text = element_text(size = 14, face = "bold")) 
print(pp2)




ggsave(paste(figure_dir, "/i_", ii, "_j_", jj, "_decomposition.png", sep = ""), 
       plot = pp2+theme(strip.text.x = element_text(size = 13, margin = margin(0, 0, 0, 0))), width = 14, height = 3.3, dpi = 300, bg = "white")


### let's plot this for all individuals and select a subject that looks good 

library(RColorBrewer)
library(gridExtra)


pdf(paste(figure_dir, "/all_decomposition.pdf", sep = ""), width = 14, height = 9.5)

for(ii in 1:122){
  
  print(ii)
  pp_list <- list()
  for(jj in 1:3){
    MM <- matrix(Y[ii,jj,], TT, FF)
    M1 <- matrix(O_tilde%*%apply(tensor_model$alpha_s[,,jj,ii], 2, mean), TT, FF)
    M2 <-  matrix(O_tilde%*%apply(tensor_model$gamma_s[,,ii], 2, mean), TT, FF)
    M3 <-  matrix(O_tilde%*%apply(tensor_model$omega_s[,,jj,ii], 2, mean), TT, FF)
    M4 <- MM  - M1 - M2 - M3 
    z_range <- range(MM,M1, M2, M3,M4, na.rm = TRUE)
    my_cols <- colorRampPalette(brewer.pal(9, "YlGnBu"))(100)
    
    grid <- expand.grid(tt = tt, ff = ff)
    
    grid$Y <- c(MM)
    grid$M1 <- c(M1)
    grid$M2 <- c(M2)
    grid$M3 <- c(M3)
    grid$M4 <- c(M4)
    
    dat2plot2 <- pivot_longer(grid, 
                              cols = c("Y", "M1", "M2", "M3", "M4"),  # Columns to gather
                              names_to = "mat_type")
    
    dat2plot2$mat_type <- factor(dat2plot2$mat_type,
                                 levels = c("Y", "M1", "M2", "M3", "M4"),
                                 labels = c("Y[i~j]^T","A[j](X[i])^T", "B[i]^T", "C[i~j]^T", "E[i~j]^T")
    )
    
    dat2plot2$ff <- dat2plot2$ff*1000
    dat2plot2$value <- dat2plot2$value*2
    dat2plot2$mat_type <- factor(dat2plot2$mat_type)
    
    
    zlim <- range(dat2plot$value, dat2plot2$value, na.rm = TRUE)
  
    breaks_tmp <- c(-5.3231666, -4.3132833, -3.3033999, -2.2935166, -1.2836333, -0.2737499,  0.7361334,  1.7460168,
                    2.7559001,  3.7657835,  4.7756668,  5.7855502,  6.7954335,  7.8053168)
    breaks <- seq(zlim[1], zlim[2], length.out = 14)
    
    breaks <- c(zlim[1], breaks_tmp[2:13],zlim[2])
    
    colors <- c("black", "#414487FF","#35608DFF", "#21918c", "#43BF71FF","#7AD151FF", "#BBDF27FF", "#fde725", "gold", "#FFC107", "orange","darkorange")
    
    
    library(scales)
    
    dat2plot$mat_type[dat2plot$mat_type == "Alcohol"] <- "Alcoholics"
    pp <- ggplot(dat2plot, aes(x = tt, y = ff, fill = value)) +
      geom_tile() +
      #scale_fill_viridis_c(limits = zlim) +  # Heatmap color scale
      scale_fill_gradientn(
        colours = colors,
        #breaks = breaks,
        breaks = pretty_breaks(n = 6),
        values = scales::rescale(breaks, from = zlim),
        limits = zlim 
      ) + 
      facet_grid(mat_type~condition) +  # One panel per group
      labs(x = "t (Sec)",
           y = "f (Hz)",
           fill = " ") +    theme(panel.background = element_blank(),
                                  plot.background = element_blank(),
                                  panel.grid.major.x = element_blank(),   
                                  panel.grid.minor.x = element_blank(),
                                  strip.text = element_text(size = 14, face = "bold")
           )+ theme(legend.key.height = unit(0.05, 'npc'))
    #print(pp)
    #dev.off()
    
    
    pp2 <- ggplot(dat2plot2, aes(x = tt, y = ff, fill = value)) +
      geom_tile() +
      #scale_fill_viridis_c() +  # Heatmap color scale
      scale_fill_gradientn(
        colours = colors,
        #breaks = breaks,
        breaks = pretty_breaks(n = 6),
        values = scales::rescale(breaks, from = zlim),
        limits = zlim 
      ) + 
      facet_wrap(~mat_type, nrow = 1, scales = "free_x",labeller = label_parsed) +  # One panel per group
      labs(x = "t (Sec)",
           y = "f (Hz)",
           fill = " ") +  theme(panel.background = element_blank(),
                                plot.background = element_blank(),
                                panel.grid.major.x = element_blank(),   
                                panel.grid.minor.x = element_blank(),
                                panel.spacing = unit(2, "lines"),
                                strip.text = element_text(size = 14, face = "bold")) 

    pp_list[[jj]] <- pp2
  }
  
  

   grid.arrange(pp_list[[1]], pp_list[[2]], pp_list[[3]], ncol = 1)
  
  
  if(ii == 12){
   ggsave(paste(figure_dir, "/all_decomposition.png", sep = ""), 
         plot =grid.arrange(pp_list[[1]]+theme(strip.text.x = element_text(size = 13, margin = margin(0, 0, 0, 0))), pp_list[[2]]+theme(strip.text.x = element_text(size = 13, margin = margin(0, 0, 0, 0))), ncol = 1),  width = 14, height = 6.7, dpi = 300, bg = "white")
  }
  
}
dev.off()


### plot the fixed effects 

ggsave(paste(figure_dir, "/eeg_fixed_park.png", sep = ""), 
       plot =pp,  width = 10, height = 5.8, dpi = 300, bg = "white")


ggsave(paste(figure_dir, "/eeg_fixed.png", sep = ""), 
       plot =pp,  width = 8.5, height = 5.1, dpi = 300, bg = "white")



### plot the base patterns, principal functions, and scores 
R <- length(tensor_model$R_indices)
dat2plot <- NULL
for(r in 1:R){
  grid <- expand.grid(tt = tt, ff = ff)
  val_tt_est <-  (bsMat_tt%*%C_t)%*% apply(tensor_model$u_s[sample_idx,r, ], 2, mean)
  val_ff_est <-(bsMat_ff%*%C_f)%*% apply(tensor_model$v_s[sample_idx,r, ], 2, mean)
  
  grid$CP_est <-kronecker(val_ff_est, val_tt_est)
  grid$rank <- rep(paste("Rank ", r, sep = ""), TT*FF)
  
  df_long <- pivot_longer(grid, 
                          cols = c("CP_est"),  # Columns to gather
                          names_to = "z") 
  
  dat2plot  <- rbind(dat2plot,  df_long)
}


dat2plot$ff <-dat2plot$ff*1000



pp <- ggplot(dat2plot, aes(x = tt, y = ff, fill = value)) +
  geom_tile() +
  scale_fill_viridis_c() +  # Heatmap color scale
  facet_wrap(~rank,nrow = 1) + 
  labs(x = "Time",
       y = "Frequency",
       fill = "Value") +    theme(panel.background = element_blank(),
                                  plot.background = element_blank(),
                                  panel.grid.major.x = element_blank(),   
                                  panel.grid.minor.x = element_blank()
       )  +  theme(strip.text = element_text(size = 12, face = "bold"))


dat2plot[dat2plot$rank == "Rank 1",]$value <- -dat2plot[dat2plot$rank == "Rank 1",]$value 


p1 <- ggplot(dat2plot[dat2plot$rank == "Rank 1",], aes(x = tt, y = ff, fill = value)) +
  geom_tile() +
  scale_fill_viridis_c() +  # Heatmap color scale
  facet_wrap(~rank,nrow = 1) + 
  labs(x = "t (Sec)",
       y = "f (Hz)",
       fill = " ") +    theme(panel.background = element_blank(),
                              plot.background = element_blank(),
                              panel.grid.major.x = element_blank(),   
                              panel.grid.minor.x = element_blank()
       ) +theme(legend.position  = "left") +  theme(strip.text = element_text(size = 14, face = "bold"))
p2 <- ggplot(dat2plot[dat2plot$rank == "Rank 2",], aes(x = tt, y = ff, fill = value)) +
  geom_tile() +
  scale_fill_viridis_c( labels = number_format(accuracy = 0.04)) +  # Heatmap color scale
  facet_wrap(~rank,nrow = 1) + 
  labs(x = "t (Sec)",
       y = "f (Hz)",
       fill = "") +    theme(panel.background = element_blank(),
                             plot.background = element_blank(),
                             panel.grid.major.x = element_blank(),   
                             panel.grid.minor.x = element_blank()
       ) + theme(legend.position  = "left") +  theme(strip.text = element_text(size = 14, face = "bold"))

## need credible intervals
pt_list <- list()
pf_list <- list()

for(r in 1:R){
  data_t <- data.frame(
    x = tt,
    mean = apply(bsMat_tt%*%C_t%*%t(tensor_model$u_s[sample_idx,r, ]), 1, mean),
    lower_95 = apply(bsMat_tt%*%C_t%*%t(tensor_model$u_s[sample_idx,r, ]), 1, function(u){quantile(u, 0.025)}),
    upper_95 = apply(bsMat_tt%*%C_t%*%t(tensor_model$u_s[sample_idx,r, ]), 1, function(u){quantile(u, 0.975)})
  )
  data_f <- data.frame(
    x = ff*1000,
    mean = apply(bsMat_ff%*%C_f%*%t(tensor_model$v_s[sample_idx,r, ]), 1, mean),
    lower_95 = apply(bsMat_ff%*%C_f%*%t(tensor_model$v_s[sample_idx,r, ]), 1, function(u){quantile(u, 0.025)}),
    upper_95 = apply(bsMat_ff%*%C_f%*%t(tensor_model$v_s[sample_idx,r, ]), 1, function(u){quantile(u, 0.975)})
  )
  
  if(r==1){
    
    data_t$mean <- - data_t$mean

    data_t$lower_95 <- - data_t$lower_95

    data_t$upper_95 <- - data_t$upper_95

    pt_list[[r]] = ggplot(data_t, aes(x = x)) +
      geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +  # 95% CI
      geom_line(aes(y = mean), color = "black", size = 0.6) +  # Posterior mean
      labs(y = expression(phi[1]^"*"~"(t)"),
           x = "t (Sec)")
    pf_list[[r]] = ggplot(data_f, aes(x = x)) +
      geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +  # 95% CI
      geom_line(aes(y = mean), color = "black", size = 0.6) +  # Posterior mean
      labs(y = expression(psi[1]^"*"~"(f)"),
           x = "f (Hz)")
  }
  
  if(r==2){
    data_t$mean <- - data_t$mean
    data_f$mean <- - data_f$mean
    
    data_t$lower_95 <- - data_t$lower_95
    data_f$lower_95 <- - data_f$lower_95
    
    data_t$upper_95 <- - data_t$upper_95
    data_f$upper_95 <- - data_f$upper_95
    
    pt_list[[r]] = ggplot(data_t, aes(x = x)) +
      geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +  # 95% CI
      geom_line(aes(y = mean), color = "black", size = 0.6) +  # Posterior mean
      labs(y = expression(phi[2]^"*"~"(t)"),
           x = "t (Sec)")
    pf_list[[r]] = ggplot(data_f, aes(x = x)) +
      geom_ribbon(aes(ymin = lower_95, ymax = upper_95), fill = "gray60", alpha = 0.5) +  # 95% CI
      geom_line(aes(y = mean), color = "black", size = 0.6) +  # Posterior mean
      labs(y = expression(psi[2]^"*"~"(f)"),
           x = "f (Hz)")
  }
}


for(r in 1:R){
  pf_list[[r]] =  pf_list[[r]] + theme_minimal() + theme(
    panel.grid = element_blank(),  # Remove all grid lines
    axis.line = element_line(color = "black"),  # Keep x and y axis lines
    axis.ticks = element_blank(),  # Remove axis ticks
    axis.text = element_text(size = 12, face = "bold"),  # Adjust text size
    plot.title = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 16), 
    axis.title.y = element_text(size = 16) 
  )   + theme(plot.margin = margin(40, 10, 10, 10))
  pt_list[[r]] =  pt_list[[r]] + theme_minimal() + theme(
    panel.grid = element_blank(),  # Remove all grid lines
    axis.line = element_line(color = "black"),  # Keep x and y axis lines
    axis.ticks = element_blank(),  # Remove axis ticks
    axis.text = element_text(size = 12, face = "bold"),  # Adjust text size
    plot.title = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 16), 
    axis.title.y = element_text(size = 16) 
  )   + theme(plot.margin = margin(40, 10, 10, 10))
  
}


library(scales)
pp_list <- list()
R_indices <- tensor_model$R_indices

for(r in R_indices){
  dat2plot <- NULL
  for(j in 1:J){
    tmp <-  data.frame(cbind(tensor_model$delta_s[sample_idx,j,r, 1], tensor_model$delta_s[sample_idx,j,r, 1]+ tensor_model$delta_s[sample_idx,j,r, 2]))
    lower <- apply(tmp, 2, function(u){quantile(u, 0.025)})*2  # recover scale
    upper <- apply(tmp, 2, function(u){quantile(u, 0.925)})*2  # recover scale
    mid <- apply(tmp, 2, median)*2
    if(r == 1){
      lower <- - lower
      upper <- -upper
      mid <- -mid
    }
    tmp <- data.frame(cbind(lower, upper,mid,  c("Control", "Alcohol"), rep(c("C1", "C2", "C3")[j], 2)))
    dat2plot <- rbind(dat2plot, tmp)
  }
  colnames(dat2plot) <- c("lower","upper","mid", "group", "condition")
  
  dat2plot$lower  <- as.numeric(dat2plot$lower) 
  dat2plot$upper  <- as.numeric(dat2plot$upper) 
  dat2plot$mid <- as.numeric(dat2plot$mid) 
  
  
  rr <- which(R_indices == r)
  pp_list[[rr]] = ggplot(dat2plot, aes( y = condition, x = mid, color = group)) +
    geom_point(position = position_dodge(width = 0.5), size = 3) +
    geom_errorbar(aes(xmin = lower, xmax = upper),  position = position_dodge(width = 0.5)) +
    theme_minimal() + #scale_y_continuous(limits = c(-11, 10)) +
    labs(x = "weight") +  
    theme(
      legend.position = c(1, 1.1), 
      legend.title = element_blank(),
      legend.justification = c(1, 1),  # Align legend inside the plot
      legend.direction = "horizontal",  # Make legend horizontal
      legend.text = element_text(size = 10, face = "bold"),  # Make legend text smaller
      panel.grid = element_blank(),  # Remove all grid lines
      axis.line = element_line(color = "black"),  # Keep x and y axis lines
      axis.text = element_text(size = 16),  # Adjust text size
      axis.title = element_text(size = 16),
      plot.title = element_text(size = 14, face = "bold")) + theme(plot.margin = margin(40, 10, 10, 10)) 
}



grid.arrange(p1 ,  pt_list[[1]], pf_list[[1]], pp_list[[1]],p2,
             pt_list[[2]], pf_list[[2]],  pp_list[[2]],
             nrow = 2, ncol= 4, heights = c(1,1), widths = c(1.3,1,1,1))



ggsave(paste(figure_dir, "/EEG_patterns.png",sep = ""), 
       grid.arrange(p1 ,  pt_list[[1]], pf_list[[1]], pp_list[[1]], p2,
                    pt_list[[2]], pf_list[[2]],  pp_list[[2]],
                    nrow = 2, ncol= 4, heights = c(1,1), widths = c(1.3,1,1,1)), width = 15, height = 7, dpi = 300)










